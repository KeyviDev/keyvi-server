/**
\page btree Augmented B-tree

TPIE provides an implementation of augmented B-trees that can be stored in both internal and external memory. The btree is implemented in the file \ref btree/btree.h in the tpie namespace. 

\section sec_stores Stores

Btrees can be configured with various options. A internal btree of ints can be constructed as:

\code
tpie::btree<int, tpie::btree_internal> tree;
tree.insert(42);
\endcode

BTrees can also be stored externally here the  minimum and maximum number of children of a node is determined by the library. An external btree of ints can be constructed as follows:
\code
tpie::temp_file file;

tpie::btree<int, tpie::btree_external> tree(file.path());
tree.insert(42);
\endcode

\section sec_traversal Traversal
The btree can be traversed by using the interface provided by the node class defined in \ref btree/node.h. The root node of the tree can be retrieved by calling \c root().

\section sec_augmentation Augmentation of nodes
The nodes in the btree can be augmented by defining an augment and an augmenter and passing these as template parameters to the tree. The following example computes the averages of nodes in the tree using the augment interface.
\code
@DOCCODE_BTREE_AUGMENT@
\endcode

\code
tpie::btree<int, tpie::btree_internal, tpie::btree_augment<average_augment > > tree;
\endcode

\section sec_key Key extract functor
In all the previous examples, the values inserted into the tree acted as keys themselves. In order to have a seperate key, a key extractor can be defined. The following example demonstrates this.
\code
@DOCCODE_BTREE_KEY@
\endcode

\code
tpie::btree<point, tpie::btree_internal, tpie::btree_key<point_key_func>, tpie::btree_comp<std::greater<int> > tree;

tree.insert(std::make_pair(1, 3));
tree.insert(std::make_pair(3, 9));
\endcode

\section sec_btree_builder Btree builder
Constructing a btree by inserting elements one by one is not optimal, since sorting the elements and then constructing a btree in a bottom-up fashion is faster. This method is used in the class \c btree_builder implemented in \ref btree/btree_builder.h. Items are pushed to the class in sorted ordered. The usage of the class is demonstrated in the following example:

\code
temp_file file;
btree_builder<int, tpie::btree_external> builder(file.path());
for(int i = 0; i < 100000; ++i)
	builder.push(i);

btree<int, tpie::btree_external> tree(builder.build());
\endcode

\section sec_btree_static Static btrees
When constructed a btree with the btree builder, often times one does not need to modify the btree afterwards, this one can use a more optimized static btree:

\code
temp_file file;
btree_builder<int, tpie::btree_static> builder();
for(int i = 0; i < 100000; ++i)
	builder.push(i);

auto tree(builder.build());
\endcode

\section sec_btree_unordered Unordered btrees
It is possible to construct a btree of incomparable elements, that is elements without a key. This can be usefull for instance for RTrees. When elements do not have keys, operations such as find, lower_bound and upper_bound, do not make sence, however one can still insert and erase elements based on iterators.

To construct a btree of incomparable elements one can do as follows:
\code
btree_builder<int, tpie::btree_internal, tpie::btree_unordered> builder();
for(int i = 0; i < 100000; ++i)
	builder.push(i);

auto tree(builder.build());
\endcode


\section sec_btree_unordered Combining options
The different options can be combined at will, for instance a static, unordered, internal btree with a high fanout can be constructe as:
\code
btree_builder<int, tpie::btree_internal, tpie::btree_unordered, tpie::static, tpie::btree_fanout<8,16> > builder();
for(int i = 0; i < 100000; ++i)
	builder.push(i);

auto tree(builder.build());
\endcode






